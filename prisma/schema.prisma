datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String              @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    VerificationToken VerificationToken[]
    urls              URL[]
}

// Url model
model URL {
    id           String      @id @default(cuid())
    original_url String
    short_url    String      @unique
    clicks       Int         @default(0)
    user         User?       @relation(fields: [userId], references: [id])
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    userId       String?
    qrCode       String?
    analytics    Analytics[]
}

// Analytics model
model Analytics {
    id        String   @id @default(cuid())
    urlId     String
    browser   String
    os        String
    device    String
    country   String
    city      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       URL      @relation(fields: [urlId], references: [id])
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime
    User       User?    @relation(fields: [userId], references: [id])
    userId     String?

    @@id([identifier, token])
}
